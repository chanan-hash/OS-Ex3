באופן פשוט הבעיה המרכזית שניתן לראות שהיא שאנחנו משתמשים בהקצאת זיכרון ( malloc ואין כל שחרור של הזיכרון, כלומר אין מתישהו free במהלך התכנית).
דבר זה גורם לדליפת זיכרון.
מצורף גם ניתוח מלא מההרצה של ה valgrind
בכל איטרציה של הלולאה אנחנו מקצים זיכורן חדש עבור המילה הבאה שיש לנו ב argv ואותה אנחנו מעתיקים לתוך המשתנה ה string שלנו על מנת להדפיס אותו.
כיוון שבכל איטרצציה אנחנו מקצים מקום חדש בזיכרון בלי לשחרר את הקודם, יוצא שבעצם יש לנו משתנה (או משתנים במהלך האיטרציה) שנמצאים לא בשימוש, אחרי שכב4 העתקנו מהם את המידע הנדרש, ותופסים בעצם מקום בזיכרון.

You enterd: #./hello
==18473== 
==18473== HEAP SUMMARY:
==18473==     in use at exit: 9 bytes in 1 blocks
==18473==   total heap usage: 2 allocs, 1 frees, 4,105 bytes allocated
==18473== 
==18473== 9 bytes in 1 blocks are definitely lost in loss record 1 of 1
==18473==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==18473==    by 0x10922A: main (hello.c:16)
==18473== 
==18473== LEAK SUMMARY:
==18473==    definitely lost: 9 bytes in 1 blocks
==18473==    indirectly lost: 0 bytes in 0 blocks
==18473==      possibly lost: 0 bytes in 0 blocks
==18473==    still reachable: 0 bytes in 0 blocks
==18473==         suppressed: 0 bytes in 0 blocks
==18473== 
==18473== ERROR SUMMARY: 7 errors from 7 contexts (suppressed: 0 from 0)
==18473== 
==18473== 1 errors in context 1 of 7:
==18473== Conditional jump or move depends on uninitialised value(s)
==18473==    at 0x483F0EB: strcpy (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==18473==    by 0x109248: main (hello.c:22)
==18473==  Uninitialised value was created by a stack allocation
==18473==    at 0x1091C9: main (hello.c:9)

אם נניח נריץ את המתכנית עם יותר מילים, כגון hello shalom hoi hoi/. 
נקבך שעבור כל מילה נקצה מקום בזיכרון כדי להעתיקק אותה, בלי ששחררנו, מה שיותר משתנים שלא בשימוש ודליפת זיכרון.
